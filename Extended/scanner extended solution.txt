// Identifiers:
// A valid identifier can have letters (both uppercase and lowercase letters), digits and underscores. 
// 1.The first letter of an identifier should be either a letter or an underscore.
// 2.You cannot use keywords as identifiers.
// 3.Length of an identì?er is not over than 15. 
// 4.Identifiers are case-sensitive

=> Solution: We have to modify 2 functions.

Token *readIdentKeyword(void)
{
  // TODO
  Token *token;
  int ln = lineNo;
  int cn = colNo;
  // let a token be a 
  token = makeToken(TK_IDENT, lineNo, colNo);
  int count = 0;
  while ((charCodes[currentChar] == CHAR_DIGIT) || (charCodes[currentChar] == CHAR_LETTER) || currentChar == 95){
    token->string[count] = currentChar; // Add current character to identifier
    count++; // crease index of token->sting array
    readChar(); // get next character
  }
  token->string[count] = '\0'; //end of string
  // MAX_IDENT_LEN = 15
  
  if (count > MAX_IDENT_LEN)
    error(ERR_IDENTTOOLONG, ln, cn);
  else if (count <= MAX_IDENT_LEN){  
    // check if this string is a keyword or not
    if (checkKeyword(token->string)!= TK_NONE){
      token->tokenType = checkKeyword(token->string);
    } 
  }
  return token;
}

Token* getToken(void) {
  Token *token;
  token = makeToken(TK_NONE, 0, 0); // Default initialization
  int ln, cn;

  if (currentChar == -1) 
    return makeToken(TK_EOF, lineNo, colNo);

  // adding case that an identifier can start with an underscore

  if (currentChar == 95){
    return readIdentKeyword();
  }

  switch (charCodes[currentChar]) {
  case CHAR_SPACE: skipBlank(); return getToken();
  case CHAR_LETTER:
    return readIdentKeyword();
  case CHAR_DIGIT:
    return readNumber();
  case CHAR_PLUS: 
    token = makeToken(SB_PLUS, lineNo, colNo);
    readChar(); 
    return token;
    // ....
    // TODO
  case CHAR_LPAR:
    ln = lineNo;
    cn = colNo;
    readChar(); 
    if (charCodes[currentChar] == CHAR_PERIOD){
      return makeToken(SB_LSEL, ln, cn);
    }
    else if (charCodes[currentChar] == CHAR_TIMES){
      skipComment();
      return getToken();
    }
    else
      return makeToken(SB_LPAR, ln, cn);
  case CHAR_RPAR:
    token = makeToken(SB_RPAR, lineNo, colNo);
    readChar();
    return token;
  case CHAR_SINGLEQUOTE:
    return readConstChar();
  case CHAR_LT:
    ln = lineNo;
    cn = colNo;
    readChar();
    if (charCodes[currentChar] == CHAR_EQ){
      return makeToken(SB_LE, ln, cn);
    }
    else
      return makeToken(SB_LT, ln, cn);
  case CHAR_GT:
    ln = lineNo;
    cn = colNo;
    readChar();
    if (charCodes[currentChar] == CHAR_EQ){
      readChar();
      return makeToken(SB_GE, ln, cn);
    }
    else{
      readChar();
      return makeToken(SB_GT, ln, cn);
    }
  case CHAR_EXCLAIMATION:
    ln = lineNo;
    cn = colNo;
    readChar();
    if (charCodes[currentChar] == CHAR_EQ){
      readChar();
      return makeToken(SB_NEQ, ln, cn);
    }
    else{
      readChar();
      error(ERR_INVALIDSYMBOL, ln, cn);
    }
  case CHAR_PERIOD:
    ln = lineNo;
    cn = colNo;
    readChar();
    if (charCodes[currentChar] == CHAR_EQ){
      token = makeToken(SB_ASSIGN, ln, cn);
      readChar();
      return token;
    }
    else{
      token = makeToken(SB_PERIOD, ln, cn);
      readChar();
      return token;
    }
  case CHAR_MINUS:
    token = makeToken(SB_MINUS, lineNo, colNo);
    readChar();
    return token;
  case CHAR_TIMES:
    token = makeToken(SB_TIMES, lineNo, colNo);
    readChar();
    return token;
  case CHAR_EQ:
    token = makeToken(SB_EQ, lineNo, colNo);
    readChar();
    return token;
  case CHAR_COMMA:
    token = makeToken(SB_COMMA, lineNo, colNo);
    readChar();
    return token;
  case CHAR_SEMICOLON:;
    token = makeToken(SB_SEMICOLON, lineNo, colNo);
    readChar();
    return token;
  case CHAR_SLASH:
    token = makeToken(SB_SLASH, lineNo, colNo);
    readChar();
    return token;
  case CHAR_COLON:
    ln = lineNo;
    cn = colNo;
    readChar();
    if ((currentChar != -1) && (charCodes[currentChar] == CHAR_EQ)){
      readChar();
      return makeToken(SB_ASSIGN, ln, cn); // :=
    }
    else{
      readChar(); 
      return makeToken(SB_COLON, ln, cn);
    }
    // ....
  default:
    token = makeToken(TK_NONE, lineNo, colNo);
    error(ERR_INVALIDSYMBOL, lineNo, colNo);
    readChar(); 
    return token;
  }
}

-----------------------------------------------------------------------------------------------------------------

// There is no rule on how long an identifier can be. However, only 15 characters are significant 

Token *readIdentKeyword(void){
    // TODO
    // MAX_IDENT_LEN = 15
    Token *token;
    // let a token be a
    token = makeToken(TK_IDENT, lineNo, colNo);
    int count = 0;
    while ((charCodes[currentChar] == CHAR_DIGIT) || (charCodes[currentChar] == CHAR_LETTER)){
      // if there is an uppercase character, invalid keyword
      if (count < MAX_IDENT_LEN)
        token->string[count] = currentChar; // Add current character to identifier
      count++; // crease index of token->sting array
      readChar(); // get next character
    }
    token->string[MAX_IDENT_LEN] = '\0'; //end of string
    
      // check if this string is a keyword or not
      if (checkKeyword(token->string)!= TK_NONE){
      token->tokenType = checkKeyword(token->string);
    }
  
  return token;
}
-----------------------------------------------------------------------------------------------------------------

// Multi-line Comments :  between /* and */
// Single-line comment : Starts with //, end at end of line.

void skipComment(int choice) {
  // TODO
  // To determine the comment is single-lined or multi-lined
  // Single-lined comment:
  while(1){ // Inside comment
    readChar(); // Get next character

    //single-lined comment
    if (charCodes[choice] == CHAR_LPAR){
      if (((char) currentChar == '\n')) { // unclosed single-comment 
          error(ERR_ENDOFCOMMENT, lineNo, colNo);
      }
      else if (charCodes[currentChar] == CHAR_TIMES){ // *
        readChar();
        if (charCodes[currentChar] == CHAR_RPAR){ // End of comment *)
          readChar();  // Finish reading a comment, scan next character
          return;
        }
        else if (currentChar == -1){ // End of file
            error(ERR_ENDOFCOMMENT, lineNo, colNo);
          }
      }
      else if (currentChar == -1){ // End of file
        error(ERR_ENDOFCOMMENT, lineNo, colNo);
      }
    }
    
    // multi-lined comment
    else if (charCodes[choice] == CHAR_SLASH){
      if (charCodes[currentChar] == CHAR_TIMES){ // *
        readChar();
        if (charCodes[currentChar] == CHAR_SLASH){ // End of comment *)
          readChar();  // Finish reading a comment, scan next character
          return;
        }
        else if (currentChar == -1){ // End of file
            error(ERR_ENDOFCOMMENT, lineNo, colNo);
          }
      }
      else if (currentChar == -1){ // End of file
        error(ERR_ENDOFCOMMENT, lineNo, colNo);
      }
    }
  }
}


----------------------------------------------------------------------------------------------------------------

// Keywords:
// All keywords must be written in lowercase

Token *readIdentKeyword(void)
{
  // TODO
  Token *token;
  int ln = lineNo;
  int cn = colNo;
  int validKeyword = 1;
  // default initilization
  token = makeToken(TK_IDENT, lineNo, colNo);
  int count = 0;
  while ((charCodes[currentChar] == CHAR_DIGIT) || (charCodes[currentChar] == CHAR_LETTER)){
    // if there is an uppercase character, invalid keyword
    if (currentChar >= 64 && currentChar <= 90)
      validKeyword = 0;
    token->string[count] = currentChar; // Add current character to identifier
    count++; // crease index of token->sting array
    readChar(); // get next character
  }
  token->string[count] = '\0'; //end of string
  // MAX_IDENT_LEN = 15
  
  if (count > MAX_IDENT_LEN)
    error(ERR_IDENTTOOLONG, ln, cn);
  else if (count <= MAX_IDENT_LEN){  
    // check if this string is a keyword or not
    if (checkKeyword(token->string)!= TK_NONE){
      if (validKeyword != 0)
        token->tokenType = checkKeyword(token->string);
    } 
  }
  return token;
}

----------------------------------------------------------------------------------------------------------------

// Character/String constants:
// Use an addition character \ for 2 constants single quote and backslash, that is ‘\’’ for a single quote 
// and ‘\\’for backslash.

````````````````````````````````````````````````````````````
Solution: 
isBackSlashBeforeIt = false;

Token* readConstChar(void) {
  // TODO
  Token *token;
  token = makeToken(TK_CHAR, lineNo, colNo);
  readChar();
  if (currentChar >= 32 && currentChar <= 126){ //Decimal code of printable characters  (32 -> 126)
    token->string[0] = currentChar; // Store the character 
    token->string[1] = '\0'; // End of string
    readChar();
    if (charCodes[currentChar] == CHAR_BACKSLASH){
      readChar();
      if (charCodes[currentChar] == CHAR_SINGLEQUOTE)
      {
        readChar(); // get next character
        return token;
      }
      else{
        readChar(); // get next character
        error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
        return NULL;
      }
    }
    else{
      error(ERR_INVALIDSYMBOL, token->lineNo, token->colNo);
      return NULL;
    }
  }
  else{
    error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
    return NULL;
  }
}

case CHAR_SINGLEQUOTE:
      if (isBackSlashBeforeIt == true){
        isBackSlashBeforeIt = false;
        return readConstChar();
      }
      error(ERR_INVALIDSYMBOL, lineNo, colNo);

  case CHAR_BACKSLASH:
    if (isBackSlashBeforeIt){
      ln = lineNo;
      cn = colNo;
      isBackSlashBeforeIt = false;
      readChar();
      return makeToken(SB_BACKSLASH, ln, cn);
    }
    else if (!isBackSlashBeforeIt){
      ln = lineNo;
      cn = colNo;
      readChar();
      if (charCodes[currentChar] == CHAR_BACKSLASH || charCodes[currentChar] == CHAR_SINGLEQUOTE){
        isBackSlashBeforeIt = true;
        return getToken();
      }
      else
        error(ERR_INVALIDSYMBOL, ln, cn);
    }

  case SB_BACKSLASH: printf("SB_BACKSLASH\n"); break;
.................................................................................................................

// String constants are allowed in KPL. A string constant can contain a sequence of printable symbols, 
// length not exceeding 255, enclosed in single quotes. A single quote is written as ''''

Token* readConstString(void) {
    Token *token = makeToken(TK_STRING, lineNo, colNo);
    int count = 0;
    readChar();
    while(isprint(currentChar)){
        if (count == MAX_CONSTANT_STRING)
        {
            error(ERR_STRINGCONSTANTTOOLONG, token->lineNo, token->colNo);
            token->string[count++] = '\0';
        }
        if(charCodes[currentChar] == CHAR_SINGLEQUOTE) {
            readChar();
            if(charCodes[currentChar] == CHAR_SINGLEQUOTE){
                if(count < MAX_CONSTANT_STRING){
                    token->string[count++] = (char)currentChar;
                }
            }
            else{
                if(count <= MAX_CONSTANT_STRING){
                    token->string[count] = '\0';
                }
                else token->tokenType = TK_NONE;
                return token;
            }
        }
        else{
            if(count < MAX_CONSTANT_STRING) token->string[count++] = (char)currentChar;
        }
        readChar();
    }
    error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
    token->tokenType = TK_NONE;
    return token;
}

